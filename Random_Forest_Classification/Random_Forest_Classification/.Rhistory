setwd("~/R scripts")
getwd()
setwd("D:/New folder/dataset/Data_Preprocessing/Data_Preprocessing")
dataset = read.csv('Data.csv')
View(dataset)
?ifelse
?ave
?mean
dataset$Age=ifelse(is.na(dataset$Age),
avg(dataset$Age,FUN=function(x)mean(x,na.rm=TRUE)),
dataset$Age
)
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN=function(x)mean(x,na.rm=TRUE)),
dataset$Age
)
View(dataset)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary,FUN=function(x)mean(x,na.rm=TRUE)),
dataset$Salary)
View(dataset)
dataset$Country=factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
View(dataset)
dataset$Country=factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
?as.factor
dataset$Purchased=factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1))
View(dataset)
# Splitting
install.packages('caTools')
library("caTools", lib.loc="~/R/win-library/3.5")
detach("package:caTools", unload=TRUE)
# Splitting
#install.packages('caTools')
library(caTools)
set.seed(0)
set.seed(0)
split=sample.split(dataset$Purchased,SplitRatio = 0.8)
split
training_set=subset(dataset,split==TRUE)
testing_set=subset(dataset,split==FALSE)
View(testing_set)
View(training_set)
View(dataset)
dataset$Country=factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
View(dataset)
rm(list = ls())
dataset = read.csv('Data.csv')
dataset$Age=ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN=function(x)mean(x,na.rm=TRUE)),
dataset$Age
)
dataset$Salary=ifelse(is.na(dataset$Salary),
ave(dataset$Salary,FUN=function(x)mean(x,na.rm=TRUE)),
dataset$Salary)
View(dataset)
View(dataset)
dataset$Country=factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
View(dataset)
dataset$Purchased=factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1))
View(dataset)
library(caTools)
set.seed(0)
split=sample.split(dataset$Purchased,SplitRatio = 0.8)
training_set=subset(dataset,split==TRUE)
testing_set=subset(dataset,split==FALSE)
View(testing_set)
View(testing_set)
#feature scaling
training_set=scale(training_set)
#feature scaling
training_set[:,2:3]=scale(training_set[:,2:3])
#feature scaling
training_set[,2:3]=scale(training_set[,2:3])
training_set
testing_set[,2:3]=scale(training_set[,2:3])
View(testing_set)
dataset[!split]
dataset[which(split),]
dataset[which(!split),]
View(testing_set)
setwd('D:')
setwd("D:/New folder/dataset/Decision_Tree_Classification/Decision_Tree_Classification")
# Fitting classifier to the Training set
# Create your classifier here
library('rpart')
# Classification template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library('rpart')
classifier=rpart(formula = Purchased ~.,
data=training_set)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
View(y_pred)
View(y_pred)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3],
type='class')
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set,type='class')
plot(set[, -3],
main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set,type='class')
plot(set[, -3], main = 'Classifier (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Classification template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(training_set)
library('rpart')
classifier=rpart(formula = Purchased ~.,
data=training_set)
#Plotting Decision Tree
plot(classifier)
text(classifier)
plot(classifier)
text(classifier)
setwd("D:/New folder/dataset/Random_Forest_Classification/Random_Forest_Classification")
# Fitting classifier to the Training set
# Create your classifier here
library('randomForest')
# Classification template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Create your classifier here
library('randomForest')
classifier=randomForest(x=training_set[-3],
y=training_set$Purchased,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
classifier=randomForest(x=training_set[-3],
y=training_set$Purchased,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
classifier=randomForest(x=training_set[-3],
y=training_set$Purchased,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3], main = 'Classifier (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-3],
y = training_set$Purchased,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, grid_set)
plot(set[, -3],
main = 'Random Forest Classification (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
plot(classifier)
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, grid_set)
plot(set[, -3], main = 'Random Forest Classification (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
