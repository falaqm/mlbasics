pwd
getwd()
setwd('D:/AWS/Sys/mlbasics/PCA/PCA')
dataset = read.csv('Wine.csv')
View(dataset)
X=dataset[,-1]
View(X)
View(dataset)
X=dataset[,-14]
View(X)
# Importing the dataset
dataset = read.csv('Wine.csv')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Importing the dataset
dataset = read.csv('Wine.csv')
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Splitting the dataset into the Training set and Test set
install.packages('caTools')
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Importing the dataset
dataset = read.csv('Wine.csv')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-14]= scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
View(test_set)
test_set[]
test_set[1]
# PCA
install.packages(c('caret','e1071'))
library(caret)
library(e1071)
pca=preProcess(x=training_set[-14],
method = 'pca',
pcaComp =2)
#Visualization of training
install.packages('ElemStatLearn')
library(caret)
library(e1071)
pca=preProcess(x=training_set[-14],
method = 'pca',
pcaComp =2)
training_set=predict(pca,training_set)
View(training_set)
training_set=training_set[c(2,3,1)]
View(training_set)
test_set=predict(pca,test_set)
View(test_set)
test_set=test_set[c(2,3,1)]
View(test_set)
classifier=glm(formula = Purchased ~ .,family = binomial,
data=training_set)
prob_pred=predict(classifier,type='response',newdata=test_set[-3])
y_pred=ifelse(prob_pred>0.5,1,0)
install.packages('glm')
# Fitting SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = svm(formula = Customer_Segment ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
# Visualising the Test set results
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3], main = 'SVM (Test set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
setwd("D:/AWS/Sys/mlbasics/LDA/LDA")
# Importing the dataset
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14]= scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
# Importing the dataset
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14]= scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
# LDA
library(MASS)
library(MASS)
lda=lda(formula=Customer_Segment,data=training_set)
training_set=as.data.frame(predict(lda,training_set))
library(MASS)
lda=lda(formula=Customer_Segment,data=training_set)
training_set=as.data.frame(predict(lda,training_set))
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14]= scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
library(MASS)
lda=lda(formula=Customer_Segment,data=training_set)
training_set=as.data.frame(predict(lda,training_set))
library(MASS)
lda=lda(formula=Customer_Segment ~ .,data=training_set)
training_set=as.data.frame(predict(lda,training_set))
View(training_set)
View(training_set)
training_set=training_set[c(5,6,1)]
View(training_set)
test_set=predict(pca,test_set)
test_set=test_set[c(5,6,1)]
test_set=as.data.frame(predict(pca,test_set))
test_set=test_set[c(5,6,1)]
test_set=as.data.frame(predict(pca,test_set))
test_set=as.data.frame(predict(lda,test_set))
test_set=test_set[c(5,6,1)]
test_set=as.data.frame(predict(lda,test_set))
test_set = as.data.frame(predict(lda, test_set))
test_set = test_set[c(5, 6, 1)]
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14]= scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
# LDA
library(MASS)
lda=lda(formula=Customer_Segment ~ .,data=training_set)
training_set=as.data.frame(predict(lda,training_set))
training_set=training_set[c(5,6,1)]
test_set = as.data.frame(predict(lda, test_set))
test_set = test_set[c(5, 6, 1)]
test_set = as.data.frame(predict(lda, test_set))
test_set = test_set[c(5, 6, 1)]
View(test_set)
library(e1071)
classifier = svm(formula = class ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('x.LD1', 'x.LD2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'LD1', ylab = 'LD2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
